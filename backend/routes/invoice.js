import express from "express";
import dotenv from "dotenv";
import { createClient } from "@supabase/supabase-js";
import PDFDocument from "pdfkit";

dotenv.config();
const router = express.Router();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY // secret key, safe in backend
);

// GET /api/invoice/:id
router.get("/:id", async (req, res) => {
  const { id } = req.params;

  try {
    // Fetch booking with vehicle and user info
  const { data: booking, error: bookingError } = await supabase
  .from("bookings")
  .select(`
    id,
    created_at,
    user_id,
    vehicle_id,
    start_date,
    end_date,
    total_price,
    status,
    dropoff_location,
    invoice_no,
    vehicles(make, model),
    profiles(full_name, phone_primary)
  `)
  .eq("id", id)
  .single();

    if (bookingError || !booking) {
      return res.status(404).json({ error: "Booking not found" });
    }

    // If invoice_no is missing, generate one
    let invoiceNo = booking.invoice_no;
    if (!invoiceNo) {
      const { data: lastBooking } = await supabase
        .from("bookings")
        .select("invoice_no")
        .like("invoice_no", `INV-${new Date().getFullYear()}-%`)
        .order("invoice_no", { ascending: false })
        .limit(1)
        .single();

      if (!lastBooking?.invoice_no) invoiceNo = `INV-${new Date().getFullYear()}-0001`;
      else {
        const lastNumber = parseInt(lastBooking.invoice_no.split("-")[2]);
        invoiceNo = `INV-${new Date().getFullYear()}-${String(lastNumber + 1).padStart(4, "0")}`;
      }

      // Save invoice_no back to booking
      await supabase.from("bookings").update({ invoice_no: invoiceNo }).eq("id", id);
    }

    // ===== Create PDF =====
    const doc = new PDFDocument({ margin: 50 });

    res.setHeader("Content-Type", "application/pdf");
   res.setHeader("Content-Disposition", `inline; filename=invoice-${invoiceNo}.pdf`);  // only views in browser
    //res.setHeader("Content-Disposition", `attachment; filename=invoice-${invoiceNo}.pdf`);// directly downloads in browser


    doc.pipe(res);

    // HEADER
    doc.fontSize(20).text("Rental Drives", { align: "center" });
    doc.fontSize(12).text("Official Vehicle Rental Marketplace", { align: "center" });
    doc.moveDown();
    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();
    doc.moveDown();

    // INVOICE TITLE
    doc.fontSize(16).text("INVOICE", { align: "center" });
    doc.moveDown();

    // Invoice info
    doc.fontSize(12);
    doc.text(`Invoice No: ${invoiceNo}`);
    doc.text(`Date: ${new Date().toLocaleDateString()}`);
    doc.moveDown();

    doc.fontSize(14).text("Billed To:");
doc.fontSize(12).text(`${booking.profiles?.full_name || "N/A"}`);
doc.text(`Phone: ${booking.profiles?.phone_primary || "N/A"}`);

doc.fontSize(14).text("Host:");
doc.fontSize(12).text(`${booking.hosts?.full_name || "N/A"}`);
doc.text(`Phone: ${booking.hosts?.phone_primary || "N/A"}`);

doc.fontSize(12).text(`Vehicle: ${booking.vehicles?.make || "N/A"} ${booking.vehicles?.model || ""}`);


    // Booking summary
    doc.fontSize(14).text("Booking Summary");
    doc.moveDown(0.5);
    doc.fontSize(12).text(`Vehicle: ${booking.vehicles.make} ${booking.vehicles.model}`);
    doc.text(`From: ${booking.start_date.split("T")[0]}`);
    doc.text(`To: ${booking.end_date.split("T")[0]}`);
    doc.text(`Total Paid: â‚¹${booking.total_price}`);
    doc.moveDown();

    doc.fontSize(10).text(
      "This invoice is system generated by Rental Drives.\nWe act as a marketplace connecting renters and hosts.\nPlease contact the host for vehicle-related issues.",
      { align: "center" }
    );

    doc.end();
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to generate invoice" });
  }
});

export default router;
